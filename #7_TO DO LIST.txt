
#7.0 Setup

<form>/<input>의 value를 얻는 방법
  1. `toDoInput`을 전체 <html> document에서 찾아볼 수 있음
    const toDoInput = document.querySelector("#todo-form input");

  2. `toDoInput`을 `toDoForm`안에서만 찾아볼 수 있음
    const toDoInput = toDoForm.querySelector("input");


Enter를 누를 때마다, 입력한 것을 비우고 싶음
  toDoInput.value = '';


input.value를 비우기 전에 그 값을 저장해 보자
  const newTodo = toDoInput.value;
    toDoInput.value = '';  // 그 후에 `toDoInput`의 값을 비움

*한 가지 명심할 건, `toDoInput`를 비웠다고 해서 `newToDo`가 비워지는 것을 의미하는 것은 아님
: <input>의 새로운 value를 새로운 변수에 복사하는 것이기 때문에
  그 이후에 `input.value`를 가지고 무얼 하든 `newToDo`에는 아무런 영향이 없음


#7.1 Adding ToDos

  const toDoForm = document.getElementById('todo-form');
  const toDoInput = toDoForm.querySelector('input');
  const toDoList = document.getElementById('todo-list');

  function paintToDo(newTodo) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    li.appendChild(span);
    span.innerText = newTodo;
    toDoList.appendChild(li);
  }

  function handleToDoSubmit(event) {
    event.preventDefault();
    const newTodo = toDoInput.value;
    toDoInput.value = '';
    paintToDo(newTodo);
  }

  toDoForm.addEventListener('submit', handleToDoSubmit);


*문제
  - toDo를 지울 수 없다는 거
  - 새로고침하면 toDo들이 사라지는 거


  #7.2 Deleting To Dos

toDo를 삭제하는 <button>을 추가해서 클릭했지만,
어떤 <button>을 눌렀는지 알 수 없음

  const li = event.target.parentElement;
  // 이게 우리가 삭제하고 싶은 <li>


`target`
: 클릭된 <html>의 element

`parentElement`
: 클릭된 <html> element의 부모


#7.3 Saving To Dos

javascript `object`나 `array` 또는 어떤 js 코드 건 간에 string으로 바꿔줌

  const player = {name: "nico"};
  JSON.stringify (player);


toDo를 입력하면 - localStorage에 저장

  const toDoForm = document.getElementById('todo-form');
  const toDoInput = toDoForm.querySelector('input');
  const toDoList = document.getElementById('todo-list');

  const toDos = [];

  function saveToDos() {
    localStorage.setItem('todos', JSON.stringify(toDos));
  }

  function deleteToDo(event) {
    const li = event.target.parentElement;
    li.remove();
  }

  function paintToDo(newTodo) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    span.innerText = newTodo;
    const button = document.createElement('button');
    button.innerText = 'X';
    button.addEventListener('click', deleteToDo);
    li.appendChild(span);
    li.appendChild(button);
    toDoList.appendChild(li);
  }

  function handleToDoSubmit(event) {
    event.preventDefault();
    const newTodo = toDoInput.value;
    toDoInput.value = '';
    toDos.push(newTodo);
    paintToDo(newTodo);
    saveToDos();
  }

  toDoForm.addEventListener('submit', handleToDoSubmit);


#7.4 Loading To Dos part One

  JSON.stringify([1, 2, 3, 4])  // array를 string으로
  // 출력값
  "[1, 2, 3, 4]"

  JSON.parse("[1, 2, 3, 4]")
  // 출력값
  (4) [1, 2, 3, 4]  // string을 array로

  localStorage.getItem("todos")
  // 출력값
  "[\"a\",\"b\",\"c\"]"

  JSON.parse(localStorage.getItem("todos"))
  // 출력값
  (3) ["a", "b", "c"]


`forEach`
: array에 있는 각각의 item에 대해 function을 실행할 수 있게 함
*하지만 이건 이 array의 item들에 대해 한 개의 function만 실행할 수 있게 해줌


  // ex 1)
  function sayHello(item) {
    console.log('this is the torn of', item);
  }

  const savedToDos = localStorage.getItem(TODOS_KEY);

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach(sayHello);


  // ex 2)
    const savedToDos = localStorage.getItem(TODOS_KEY);

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach((item) => console.log('this is the torn of', item));


위 두 가지 방법은 같은 결과물, 하지만 아래가 function을 작성할 때 더 짧게 쓰는 방법
(이름도 필요 없고, function을 쓸 필요도 업고 …)

=> (arrow function : 화살표 함수)


#7.5 Loading To Dos part Two

새로고침하면 - localStorage에서 저장한 a, b, c를 불러와서 - 화면에 그려주고 싶음
