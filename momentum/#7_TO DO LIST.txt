
#7.0 Setup

<form>/<input>의 value를 얻는 방법
  1. `toDoInput`을 전체 <html> document에서 찾아볼 수 있음
    const toDoInput = document.querySelector("#todo-form input");

  2. `toDoInput`을 `toDoForm`안에서만 찾아볼 수 있음
    const toDoInput = toDoForm.querySelector("input");


Enter를 누를 때마다, 입력한 것을 비우고 싶음
  toDoInput.value = '';


input.value를 비우기 전에 그 값을 저장해 보자
  const newTodo = toDoInput.value;
    toDoInput.value = '';  // 그 후에 `toDoInput`의 값을 비움

*한 가지 명심할 건, `toDoInput`를 비웠다고 해서 `newToDo`가 비워지는 것을 의미하는 것은 아님
: <input>의 새로운 value를 새로운 변수에 복사하는 것이기 때문에
  그 이후에 `input.value`를 가지고 무얼 하든 `newToDo`에는 아무런 영향이 없음


#7.1 Adding ToDos

  const toDoForm = document.getElementById('todo-form');
  const toDoInput = toDoForm.querySelector('input');
  const toDoList = document.getElementById('todo-list');

  function paintToDo(newTodo) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    li.appendChild(span);
    span.innerText = newTodo;
    toDoList.appendChild(li);
  }

  function handleToDoSubmit(event) {
    event.preventDefault();
    const newTodo = toDoInput.value;
    toDoInput.value = '';
    paintToDo(newTodo);
  }

  toDoForm.addEventListener('submit', handleToDoSubmit);


*문제
  - toDo를 지울 수 없다는 거
  - 새로고침하면 toDo들이 사라지는 거


  #7.2 Deleting To Dos

toDo를 삭제하는 <button>을 추가해서 클릭했지만,
어떤 <button>을 눌렀는지 알 수 없음

  const li = event.target.parentElement;
  // 이게 우리가 삭제하고 싶은 <li>


`target`
: 클릭된 <html>의 element

`parentElement`
: 클릭된 <html> element의 부모


#7.3 Saving To Dos

javascript `object`나 `array` 또는 어떤 js 코드 건 간에 string으로 바꿔줌

  const player = {name: "nico"};
  JSON.stringify (player);


toDo를 입력하면 - localStorage에 저장

  const toDoForm = document.getElementById('todo-form');
  const toDoInput = toDoForm.querySelector('input');
  const toDoList = document.getElementById('todo-list');

  const toDos = [];

  function saveToDos() {
    localStorage.setItem('todos', JSON.stringify(toDos));
  }

  function deleteToDo(event) {
    const li = event.target.parentElement;
    li.remove();
  }

  function paintToDo(newTodo) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    span.innerText = newTodo;
    const button = document.createElement('button');
    button.innerText = 'X';
    button.addEventListener('click', deleteToDo);
    li.appendChild(span);
    li.appendChild(button);
    toDoList.appendChild(li);
  }

  function handleToDoSubmit(event) {
    event.preventDefault();
    const newTodo = toDoInput.value;
    toDoInput.value = '';
    toDos.push(newTodo);
    paintToDo(newTodo);
    saveToDos();
  }

  toDoForm.addEventListener('submit', handleToDoSubmit);


#7.4 Loading To Dos part One

  JSON.stringify([1, 2, 3, 4])  // array를 string으로
  // 출력값
  "[1, 2, 3, 4]"

  JSON.parse("[1, 2, 3, 4]")
  // 출력값
  (4) [1, 2, 3, 4]  // string을 array로

  localStorage.getItem("todos")
  // 출력값
  "[\"a\",\"b\",\"c\"]"

  JSON.parse(localStorage.getItem("todos"))
  // 출력값
  (3) ["a", "b", "c"]


`forEach`
: `array`에 있는 각각의 item에 대해 `function`을 실행할 수 있게 함
*하지만 이건 이 `array`의 item들에 대해 한 개의 `function`만 실행할 수 있게 해줌


  // ex 1)
  function sayHello(item) {
    console.log('this is the torn of', item);
  }

  const savedToDos = localStorage.getItem(TODOS_KEY);

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach(sayHello);


  // ex 2)
    const savedToDos = localStorage.getItem(TODOS_KEY);

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach((item) => console.log('this is the torn of', item));


위 두 가지 방법은 같은 결과물, 하지만 아래가 function을 작성할 때 더 짧게 쓰는 방법
(이름도 필요 없고, function을 쓸 필요도 업고 …)

=> (arrow function : 화살표 함수)


#7.5 Loading To Dos part Two

새로고침하면 - localStorage에서 저장한 a, b, c를 불러와서 - 화면에 그려주고 싶음

  const toDoForm = document.getElementById('todo-form');
  const toDoInput = toDoForm.querySelector('input');
  const toDoList = document.getElementById('todo-list');

  const TODOS_KEY = 'todos';

  const toDos = [];

  function saveToDos() {
    localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));
  }

  function deleteToDo(event) {
    const li = event.target.parentElement;
    li.remove();
  }

  function paintToDo(newTodo) {
    const li = document.createElement('li');
    const span = document.createElement('span');
    span.innerText = newTodo;
    const button = document.createElement('button');
    button.innerText = 'X';
    button.addEventListener('click', deleteToDo);
    li.appendChild(span);
    li.appendChild(button);
    toDoList.appendChild(li);
  }

  function handleToDoSubmit(event) {
    event.preventDefault();
    const newTodo = toDoInput.value;
    toDoInput.value = '';
    toDos.push(newTodo);
    paintToDo(newTodo);
    saveToDos();
  }

  toDoForm.addEventListener('submit', handleToDoSubmit);

  const savedToDos = localStorage.getItem(TODOS_KEY);

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach(paintToDo);
  }


*문제

예전 것들을 복원했지만 새로 추가한 것들만 localStorage에 저장되고, 예전 것은 없어졌음
게다가 중복되는 item을 추가하면 예전 것을 덮어씀

: application이 시작될 때 `toDos array`는 항상 비어있기 때문

  그리고 `newToDo`를 작성하고 <form>을 `submit`할 때마다
  `newToDo`를 `toDos array`(빈 array)에 그냥 `push`하게 됨

  그리고 그 toDo를 저장할 때 새로운 toDo들만 포함하고 있는 `array`를 저장하고 있음
  toDos는 이전의 toDo들은 갖고 있지 않음 (전에 있던 toDo들은 localStorage에 들어있음)

  ⇒ 우리가 갖고 있던 toDos의 이전 복사본을 잊어버리고 있음


덮어씌우는 것을 원하지 않고, 이전 것과 새로운 것을 모두 유지하고 싶음

  // let으로 바꿔서 업데이트가 가능하도록 만들고
  let toDos = [];

  if (saveToDos !== null) {
    const parsedToDos = JSON.parse(savedToDos);

    /* localStorage에 toDo들이 있으면
      toDos에 parsedToDos를 넣어서 전에 있던 toDo를 복원 */
    toDos = parsedToDos;

    parsedToDos.forEach(paintToDo);
  }

  ⇒ 이건 단지 toDos가 빈 값으로 시작했었기 때문에 일어난 해프닝


*문제
delete하고 새로고침 하면 다시 생기는 item
: 화면에서는 삭제를 했지만, localStorage에서는 지우지 않았기 때문


#7.6 Deleting To Dos part One

To Do를 지울 때마다 localStorage에 업데이트를 하지 않고 있음
*localStorage는 `toDos array`를 복사해두는 곳
⇒ `toDos array`가 local storage와 같지 않다는 걸 생각

어떤 todo text (item)을 지워야 할지 알 수 없는 javascript, HTML 입장에서
`deleteToDo`는 화면에서 어떤 element를 지워야 하는지 알고 있음
그치만 어떤 todo text를 데이터베이스에서 지워야 하는지 모름

만약 “a”가 두 개라면? 첫 번째를 지웠는지, 마지막인지 알 수 없음
그래서 toDo들에게 ID를 주고자 함

  [{id:121212  /* 랜덤한 ID */, text:"drink" /* todo의 내용 */}]


`Date.now()`
: 밀리초(1000분의 1초)를 주는 함수


`push`로 `array`에 (item)을 추가하는 법
: todo들에게 `id`를 줌으로써 text 대신 object를 `push`

  const newTodoObj = {
      text: newTodo,
      id: Date.now(),
    };
    toDos.push(newTodoObj);


#7.7 Deleting To Dos part Two

`forEach()`는 `paintToDo()`를 `parsedToDos` 배열의 요소마다 실행
*`forEach()`는 `paintToDo()`를 기본적으로 실행


만약 `array`에서 뭔가를 삭제할 때 실제로 `array`에서 그걸 지우는 게 아니라,
지우고 싶은 (item)을 빼고 새 `array`를 만듦
⇒ (item)을 지우는 게 아니라 (item)을 제외하는 거

`filter()`
: 예전 array에는 실제로 작업하지 않고, 새 array를 줌 
  `sexyFilter()` 에 1, 2, 3, 4를 넣어서 차례대로 실행


*만약 새 array에도 1, 2, 3, 4를 포함하고 싶으면
`sexyFilter()`는 반드시 `true`를 `return`해야 함 (false면 제외됨)

  function sexyFilter () {
      return true
  }

  [1, 2, 3, 4].filter(sexyFilter)

  sexyFilter(1)
  sexyFilter(2)
  sexyFilter(3)
  sexyFilter(4) //와 같은 행동


  ex ) 3을 지우고 싶을 때
    
  function sexyFilter (item) {return item !== 3}
  [1, 2, 3, 4, 5].filter(sexyFilter)

  // 출력값
  (4) [1, 2, 4, 5]


#7.8 Deleting To Dos part Three

삭제하고자 하는 id를 제외하고 array를 만들고 - todos array 업데이트
: todos가 localStorage에 저장돼있으니까 이걸 업데이트해서 유지


*문제
  - li.id는 string 타입
  - toDo.id는 number 타입

`parseInt()`
: 문자열을 숫자로 바꿔줌


`array`에서 (item)을 삭제하는 법

  function saveToDos() {
    localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));
  }

  function deleteToDo(event) {
    const li = event.target.parentElement;
    li.remove();
    toDos = toDos.filter((toDo) => toDo.id !== parseInt(li.id));
    saveToDos();
  }